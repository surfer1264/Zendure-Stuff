[
    {
        "id": "479e3443afedb613",
        "type": "tab",
        "label": "Nulleinspeisung",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8cb3e48299bf05a3",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(6.1) Hilfe: DeBug On/Off / nur für Testzwecke",
        "style": {
            "label": true
        },
        "nodes": [
            "4c8b09952269dd08",
            "1a20522aef689bfc",
            "8168c7cbdb038c4d"
        ],
        "x": 574,
        "y": 2179,
        "w": 452,
        "h": 122
    },
    {
        "id": "4cd6e76302eb583f",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(4.1) Auf Änderungen am Frontend reagieren",
        "style": {
            "label": true
        },
        "nodes": [
            "e9f9cd15a6862c4e",
            "c84c098c6effed96",
            "7d4c4e86e4f55c0e",
            "0e480ca221581f95",
            "9e746fb7159e492c",
            "3449af90d583c750",
            "468aa5952345cfac",
            "40a4a90fc6cbd15d",
            "debab2e8e737f5d7",
            "1b49fc372d8175f7",
            "7a4cdab88b37efa4",
            "ba6605545cfdfb18",
            "26c46f28a4782ba1",
            "6453649fc9e5f5f0",
            "5cfcf573718eb3d5",
            "f6f5cf5f1e5c7c22",
            "af7cb14005ad7208",
            "5689f66e1ce2031c",
            "45c911e07adc21ba",
            "a49dce0ccd7c992b",
            "af1d76b72a7f2aca",
            "20e1d26f9cfcb4d0",
            "9bcffdcf2913b47b",
            "15951ffac0a8ed47",
            "b2900737df35050a",
            "31aef1593af4b0d7",
            "5e173fb39bf8170d"
        ],
        "x": 174,
        "y": 2339,
        "w": 1172,
        "h": 402
    },
    {
        "id": "fdb0ce097a97065d",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(1.1) Initialisierung: Konfiguration von Dashboard übernehmen",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "0b1e18818ad83899",
            "914b9236075d8b71",
            "0265e5a3515f9ff8",
            "180ce22f05ebcd8b",
            "7d5cc8f2e1131191",
            "6fb0045e8cdc267c",
            "7097e2efb7e186dc",
            "2c1c05176cc9fa40",
            "f07808beb37f2be1",
            "7b4e9c68d230dfef",
            "f5ac4859d53b8c34",
            "23e4362f7e76ec9f",
            "404d1730801695a8",
            "108e0ec12c031ce4",
            "e170bc624eacf9aa",
            "9467d9f7df48e4e5",
            "06635f54085d96a3",
            "edcb9390f933d4b7",
            "1a09bce668c12667",
            "b4b07729dd9d31ee",
            "f64a874c50bdf191"
        ],
        "x": 174,
        "y": 19,
        "w": 992,
        "h": 442
    },
    {
        "id": "0ebb8e7b772678cd",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(7.1) Wechselrichter: Ansteuern",
        "style": {
            "label": true,
            "fill": "#c8e7a7"
        },
        "nodes": [
            "60df30044c929c46",
            "5496fa05034dd5e0",
            "13971ddb6ad995e2",
            "54372a43b72a9c3a",
            "e1823dbb1fbb80f7",
            "fc7613a47a09c1a6",
            "7f5bc6e47b11df44",
            "0d452cdc92314b7d"
        ],
        "x": 1484,
        "y": 1879,
        "w": 1052,
        "h": 182
    },
    {
        "id": "d926ab42ae07f620",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(3.4) Spezial:  Counter Regleraktionen zurücksetzen",
        "style": {
            "label": true
        },
        "nodes": [
            "4a08cb7d49d66609",
            "1cf928d6ff176b91",
            "b35e0d2710be813a",
            "0cf6f523d136f7e5",
            "bca937b53d8c28ae",
            "197d6f4154e77e99"
        ],
        "x": 1454,
        "y": 479,
        "w": 912,
        "h": 202
    },
    {
        "id": "3ce9227ad71245e3",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(8) Testflows",
        "style": {
            "label": true
        },
        "nodes": [
            "e1165b70369f2b1d",
            "3c31d8008dcaffaa",
            "e25dd8e781b3f57d",
            "91570a4c78376cef",
            "1c1b6369a59eabbe",
            "fc9dbf8b3b334185",
            "e452733f940cf159",
            "bb929c7f2e0a7c3f",
            "a056e94e32dc397e",
            "2940a6546713a79a",
            "6bd08e9d0b68c8e0",
            "3c8cabaa304bd745",
            "ac712f39db9196a3",
            "0a3fd6bcfaa113dc",
            "8670dc77189b5b5f"
        ],
        "x": 168,
        "y": 3953,
        "w": 838,
        "h": 468
    },
    {
        "id": "a1160eda259de3ef",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(3.2) Was passiert, wenn der Reglungsalgorithmus ausgeschaltet wird?",
        "style": {
            "label": true
        },
        "nodes": [
            "c7ec3eef7ebbbfbe",
            "9413afc1555f6ee5",
            "d4a5eb77aa517589",
            "2fc53edc55cab48e"
        ],
        "x": 1454,
        "y": 79,
        "w": 912,
        "h": 142
    },
    {
        "id": "acff453100dcbbc9",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(1.2) Initialisierung Termindaten",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "645676e2f7f3e8cf",
            "42fc7acb14089ef4",
            "943544611b67c3df",
            "09dffc974b495c82",
            "43418775b6507be1",
            "958b193833400787",
            "cac27145bbce8069",
            "076b4e7072e40b12",
            "c29538ec26e2ffb7",
            "9e1f30a6ad96c325",
            "2a3d8831dcef494e",
            "a0f16c5abc5d653d",
            "25c2c1d8b0140bb9",
            "7a35a4cb11438e99"
        ],
        "x": 174,
        "y": 479,
        "w": 898,
        "h": 468
    },
    {
        "id": "035acd6f5889242d",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(4.2) Auf Änderungen im Frondend reagieren, Terminmodus",
        "style": {
            "label": true
        },
        "nodes": [
            "95aae71aad83e480",
            "b5bf8bcda7423569",
            "fa86dfe1511e4782",
            "e80f0135fcd06711",
            "e00a8abfacced21e",
            "d3744680f9123907",
            "85470c3b214d6856",
            "5720bb584469a627",
            "8b8f010a71a323a4",
            "a9a461cbb8765f2b",
            "7da3b1748f25fccc",
            "8126e6438578eab3",
            "17d9fef67944a9b4",
            "0d56421cb0e22b14",
            "f75a8d621c76d26e",
            "f9c28e57357fbedd",
            "909de9d9437f09c6",
            "f76cb1b980c3bdf2",
            "924fcf53aa0acbdc",
            "5a619949abdec684"
        ],
        "x": 174,
        "y": 2819,
        "w": 1172,
        "h": 322
    },
    {
        "id": "6e708c215cdbfc98",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(5.2) Terminmodus: Steuerung, Prüfe Termine",
        "style": {
            "label": true
        },
        "nodes": [
            "46d329ad8dd32a6a",
            "b521fd91073a57a3",
            "ca349456294f5c38",
            "9e041a2a129bd5d1",
            "9c1f091862872c3f",
            "f8a44280bd222a9e",
            "77e722feaad4dffe",
            "13698f3c995b927e",
            "5485cb51b64e87ef",
            "722460ce5b6e1c2d"
        ],
        "x": 174,
        "y": 3319,
        "w": 1172,
        "h": 202
    },
    {
        "id": "3b8b8c73f8c2f645",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(5.3) Spezial: Was passiert wenn der Terminmodus on/off?",
        "style": {
            "label": true
        },
        "nodes": [
            "fca9127a7f61a1b8",
            "e6ea1346bc547904",
            "5dd4fe71b0a47034",
            "2b9f6a16b9c71e0b"
        ],
        "x": 174,
        "y": 3539,
        "w": 772,
        "h": 122
    },
    {
        "id": "fa899eab480fd056",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(5.1) Terminmodus: AktiverTermin wird gesetzt bei Terminwechsel",
        "style": {
            "label": true
        },
        "nodes": [
            "d5eeaf058038c14e",
            "cbe6d62869a9bbe6"
        ],
        "x": 174,
        "y": 3219,
        "w": 632,
        "h": 82
    },
    {
        "id": "b5ff1f69caf7f3fb",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(6.2) Hilfe: Fange Fehler",
        "style": {
            "label": true
        },
        "nodes": [
            "304c27e2b8253ddc",
            "eaa3ee5eb626fc27",
            "75c29f28532e7a32",
            "ec50ae1b2f62c5ed"
        ],
        "x": 174,
        "y": 3719,
        "w": 772,
        "h": 122
    },
    {
        "id": "b6cbd1ee551c690b",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(7.2) Wechselrichter an Oberfläche AN/AUS",
        "style": {
            "label": true
        },
        "nodes": [
            "4119817686335d91",
            "3f310be62393785c",
            "df520bc5a9c771f0",
            "6772ff6019665b83",
            "05397794624406c5",
            "8a4a05751fdc343f",
            "367af67087a908a8",
            "3b9421d90a4b9fd3",
            "2986171de753aadb",
            "113787982a56301f",
            "d75f80acac58c46f",
            "88f0ebf6669abe2f",
            "2901366668454020",
            "a3802b99388a73e1",
            "30471465b9e6510f",
            "36f3252fb4621270",
            "4ade168f633a49b7",
            "9c35e52d51caca37"
        ],
        "x": 1494,
        "y": 2139,
        "w": 1692,
        "h": 322
    },
    {
        "id": "4e7901031e717127",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(3.3.) Spezial: Wenn der Shelly3EM ausfällt...oder der Solarflow Offline ist",
        "style": {
            "label": true
        },
        "nodes": [
            "b39b705f55bc143a",
            "354e9d385e0e7a12",
            "7a5d3ef92442a929",
            "8556d367c4b1fac5",
            "a62ebd85d47fee9f",
            "750f877240f66bc6",
            "b1f2ddda67ab1775",
            "557b88a08fb680ad",
            "8546724667636606",
            "1bdd52ee74cd6023",
            "f6d4dc83056b836e",
            "c4baeda9f9677e08"
        ],
        "x": 1454,
        "y": 239,
        "w": 912,
        "h": 222,
        "info": "## Verbindungsverlust Shelly 3EM\r\nDer Shelly 3EM verliert manchmal seine Verbindung\r\n\r\ndann:\r\n - wird der WR-Ausgang  auf 80W gesetzt (auf einen sinnvollen Grundlastwert)\r\n - die Regelfunktion `ReglerAktiv=off` außer Kraft gesetzt\r\n - der WR-AUsgang angesteuert\r\n\r\nWenn der SHelly wieder online ist,\r\n\r\ndann:\r\n - die Regelfunktion `ReglerAktiv=on` gesetzt\r\n - werden alle Variablen des gesamten FLows erneut initialisiert.\r\n"
    },
    {
        "id": "70cc64c2bba0fbd9",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(3.6) Spezial: Verfügbarkit der Shellys melden",
        "style": {
            "label": true
        },
        "nodes": [
            "9b85d89c5ecbfb58",
            "93030162d5c5a12c",
            "03ed40ed26dd3a65",
            "d99b35c545ee754a",
            "919fb03d28bf7aba",
            "59f3b95dd2f0e022",
            "b78e47bc659c68e6"
        ],
        "x": 1454,
        "y": 719,
        "w": 912,
        "h": 182
    },
    {
        "id": "46a88bad508d3778",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(2) Reglerfunktion",
        "style": {
            "label": true,
            "stroke": "#ff0000",
            "fill": "#e3f3d3",
            "color": "#ff0000"
        },
        "nodes": [
            "1",
            "3",
            "168148af37ed1368",
            "68c44e68d8a62aa4",
            "5110fa7591c84b6b",
            "bae021af7ad4d4ea",
            "240b1ea3948dee0a",
            "1f11ef02984634d4",
            "db71458988a0ae4a",
            "4f2a4b1d2bb4a50a",
            "82e6e623f87b357b",
            "66a15f5adc0815dc",
            "be89d5ddb5c4de40",
            "7e065cdfb6cd92bd",
            "f6b17c0a7515dc64",
            "78dbc119241bb5d0",
            "3f77c130efc4805a",
            "d8febfbf64f9a1dc",
            "1e049cf62d58e43c"
        ],
        "x": 194,
        "y": 1799,
        "w": 1132,
        "h": 348
    },
    {
        "id": "0ded3f6e0d781a4e",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(1.3) Initialisierung Ausgang",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "df27770545d213b5",
            "aebca2fa91b04224",
            "dd3a208eb767c579",
            "80276a25567d0ce3",
            "df1e2cb0ac09ba12",
            "7d0404303c8fad6d",
            "44725bc13c3d9599",
            "b79ae4256daf27f6",
            "e87564ebc6315033",
            "bf65d001e486db67",
            "51239912e3877c4d",
            "039ee9a7ab711a33",
            "d9fb180bd5fd6ff8",
            "f988239e95dc5426",
            "e6c67233c1c5b911",
            "ec84cf4771cfbcac",
            "f81801a182e992f9",
            "ae2d81258bd8fae4",
            "7d73a67d14204ea2",
            "25fc412c23c1d980",
            "4d018375ab818129",
            "bd67f151a7c8bdbe",
            "9e26b0c7a7787d25",
            "5c36c0c1bfabe8e7",
            "3cd125758b237fce",
            "810f769ffce8a701",
            "cf998755e26fe945",
            "f95d4fe5b1ba92c3",
            "e01d8fa50d01f508",
            "2945df02bcac2061"
        ],
        "x": 184,
        "y": 959,
        "w": 1222,
        "h": 788
    },
    {
        "id": "72932590259c2eb2",
        "type": "group",
        "z": "479e3443afedb613",
        "name": "(1.4) Setze SF-Entladegrenze nach Monat",
        "style": {
            "label": true,
            "color": "#777777",
            "stroke": "#777777",
            "fill": "#ffffbf"
        },
        "nodes": [
            "959c8c911e7fde10",
            "10a5947e7b0e4bba",
            "ee79553e2bee0ac5",
            "fd9ffa19de35ef1b",
            "40cd311eb34f8bec"
        ],
        "x": 1454,
        "y": 939,
        "w": 912,
        "h": 142
    },
    {
        "id": "2a3d8831dcef494e",
        "type": "group",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2717c849e2440723",
            "60b5b7b848171b52"
        ],
        "x": 474,
        "y": 839,
        "w": 572,
        "h": 82
    },
    {
        "id": "e1165b70369f2b1d",
        "type": "group",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Hoymiles testen / relative Ansteuerung",
        "style": {
            "label": true
        },
        "nodes": [
            "ee29490c9c4b5005",
            "041e921ba09a57a6",
            "3c960d972905ddd8"
        ],
        "x": 194,
        "y": 3979,
        "w": 752,
        "h": 82
    },
    {
        "id": "3c31d8008dcaffaa",
        "type": "group",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "APSysem EZ1 testen / absolute Ansteuerung",
        "style": {
            "label": true
        },
        "nodes": [
            "e2258c6eea29d2b9",
            "e7e9befaa8453b4d",
            "0ec176a2fa37ecc0"
        ],
        "x": 194,
        "y": 4079,
        "w": 752,
        "h": 82
    },
    {
        "id": "7d73a67d14204ea2",
        "type": "group",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Smart Modus der FIreSon Integration",
        "style": {
            "label": true,
            "fill": "#e3f3d3"
        },
        "nodes": [
            "41f46826bd3b190e",
            "68eb3e92f051ff26",
            "b2f2791b82ef1fd9",
            "d36943bed8f6d1b6"
        ],
        "x": 254,
        "y": 1519,
        "w": 272,
        "h": 202
    },
    {
        "id": "d8febfbf64f9a1dc",
        "type": "group",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Shelly1PM Abfrage",
        "style": {
            "label": true
        },
        "nodes": [
            "2c22eb5a28b88af3",
            "76f6c97f59e020a9"
        ],
        "x": 254,
        "y": 1979,
        "w": 292,
        "h": 142
    },
    {
        "id": "cf998755e26fe945",
        "type": "group",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "AUS",
        "style": {
            "label": true
        },
        "nodes": [
            "f14903b8d8cafcf6",
            "69c9aaf49d7fabba",
            "ea244f2be20330ad",
            "9d7ca67058014a92"
        ],
        "x": 574,
        "y": 1459,
        "w": 292,
        "h": 202
    },
    {
        "id": "1",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Alle 5 Sekunden",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "",
        "x": 330,
        "y": 1840,
        "wires": [
            [
                "168148af37ed1368",
                "7e065cdfb6cd92bd"
            ]
        ]
    },
    {
        "id": "3",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "P-Regler",
        "func": "let debug = flow.get(\"Debug\");\nlet wrmax = flow.get (\"WRLeistung\"); //max. WR Leistung in W\nlet wrmin = flow.get(\"WRminLeistung\"); //min WR Leistung in W\nlet soll = flow.get (\"Sollwert\"); //Sollwert in W\nlet grenze = flow.get (\"MaxEinspeisung\"); //max. Einspeisung in W\nlet minimal = flow.get (\"MinEinspeisung\"); //Mindest Einspeisung\nlet hyst = global.get (\"Hysterese\"); // Hysterese-Bereich in W\nlet fehler = 0;\nlet kp = flow.get (\"Reglerkp\"); //Dämpfungsfaktor\nlet delta = 0;\n//letzte Einstellung des WR laden\nlet vorher = flow.get(\"Regelwert\");\n\n//Hole aktuellen Verbrauchswert vom Shelly3EM RPC Abfrage\nlet leistung = Number(msg.payload.total_act_power);\nflow.set (\"3em\" , leistung);\n// Hole aktuelle Verbrauchswerte vom Shelly3EM event Knoten \n//let leistung = Number(msg.payload);\n\n//Wie groß ist die Abweichung von Soll und Hysterese?\nif (Math.abs(leistung-soll) > (hyst)) \n    {\n    fehler = Math.round(soll - leistung);\n    }\nelse {\n    fehler = 0;\n    }\nflow.set(\"fehler\", fehler);\n\n// Absolutue Abweichung ist der fehler\n// wenn fehler negativ, dann mit Dämpfung (kp) hochfahren\n// wenn fehler positiv, dann so schnell wie möglich Einspeisung zurücknehmen\nif (fehler < 0)\n    {\n    delta = kp * fehler;\n    }\nelse\n    {\n    delta = fehler;\n    }\n// Neue WR-Begrenzung berechnen\nlet neu = Math.round(vorher - delta);\n\n// Begrenzung auf gültige Werte zwischen WRmin (geschlossen) oder WRmax (offen) kalibrieren\nneu = Math.max(Math.max(wrmin, minimal), Math.min( wrmax, neu));\n\n// Berücksichtige eine mögliche Einspeise-Begrenzung\n// Wenn neuer Regelwert, dann setzte Regelwert, wenn Regelwert größer Begrenzung, dann Setzte ´Begrenzung\nneu = Math.min(neu, grenze);\nflow.set(\"Regelwert\", neu);\n\n    \n//Wenn sich der Reglewert nicht gändert hat: Ignore\nlet diff = neu - vorher; \nif (debug) {\nnode.warn ({leistung, diff, vorher, fehler, grenze, neu});\n}\n\nif (diff !== 0)\n    {\n    msg.payload = {einspeisewert: neu};\n    return msg;\n    }\n//msg.payload = {einspeisewert: neu};\nreturn;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2020,
        "wires": [
            [
                "68c44e68d8a62aa4",
                "240b1ea3948dee0a"
            ]
        ]
    },
    {
        "id": "4c8b09952269dd08",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "8cb3e48299bf05a3",
        "name": "🔛 Debug EIN",
        "props": [
            {
                "p": "debug",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 700,
        "y": 2220,
        "wires": [
            [
                "8168c7cbdb038c4d"
            ]
        ]
    },
    {
        "id": "1a20522aef689bfc",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "8cb3e48299bf05a3",
        "name": "🔴 Debug AUS",
        "props": [
            {
                "p": "debug",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 700,
        "y": 2260,
        "wires": [
            [
                "8168c7cbdb038c4d"
            ]
        ]
    },
    {
        "id": "8168c7cbdb038c4d",
        "type": "change",
        "z": "479e3443afedb613",
        "g": "8cb3e48299bf05a3",
        "name": "Setze flow.debug",
        "rules": [
            {
                "t": "set",
                "p": "Debug",
                "pt": "flow",
                "to": "debug",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "e9f9cd15a6862c4e",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable hysterese",
        "func": "let regler_hysterese = msg.payload;\nglobal.set(\"Hysterese\", regler_hysterese);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "c84c098c6effed96",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change Hysterese?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_hysterese"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 290,
        "y": 2380,
        "wires": [
            [
                "e9f9cd15a6862c4e"
            ]
        ]
    },
    {
        "id": "0b1e18818ad83899",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "hyst",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_hysterese",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "hyst",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 60,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "914b9236075d8b71",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "soll",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_sollwert",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "soll",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 100,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "0265e5a3515f9ff8",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "aktiv",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.regler_aktiv",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "aktiv",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 140,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "180ce22f05ebcd8b",
        "type": "join",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "Minimal",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 930,
        "y": 140,
        "wires": [
            [
                "7d5cc8f2e1131191"
            ]
        ]
    },
    {
        "id": "7d5cc8f2e1131191",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "Flowvariablen setzen",
        "func": "//Konfiguration aus dem dem Dashboard initial übernehmen\nconst { hyst, soll, max, aktiv, last, wraktiv, ignore, typ, minimal, connected} = msg.payload;\nlet wrmax = flow.get (\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\"); \nglobal.set(\"Hysterese\", hyst);\nflow.set(\"Sollwert\", soll);\nflow.set(\"MaxEinspeisung\", Math.max(wrmin,Math.min(wrmax,max)));\nflow.set(\"MaxEinspeisungSave\", 200);\nflow.set(\"MinEinspeisung\", Math.max(wrmin, minimal));\nflow.set(\"ReglerAktiv\", aktiv);\nflow.set(\"AktiverTermin\", last);\nglobal.set(\"WRAktiv\", wraktiv);\nflow.set(\"IgnoreBypass\", ignore);\nflow.set(\"ReglerTyp\", typ);\nflow.set(\"Connected\", connected);\n\n//Internal Used\nflow.set(\"Regelwert\", 70);\nflow.set(\"Debug\", false);\n\nlet debug = flow.get(\"Debug\");\nif (debug) {\nnode.warn ({\n  hyst,\n  soll,\n  wrmax,\n  max,\n  aktiv,\n  wraktiv,\n  connected\n  })\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "e170bc624eacf9aa"
            ]
        ]
    },
    {
        "id": "6fb0045e8cdc267c",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "max",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_maximale_einspeisung",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "max",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 180,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "7d4c4e86e4f55c0e",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change Regelung Aktiv?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.regler_aktiv"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 310,
        "y": 2420,
        "wires": [
            [
                "0e480ca221581f95"
            ]
        ]
    },
    {
        "id": "0e480ca221581f95",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable Regler aktiv",
        "func": "let aktiv = msg.payload;\nflow.set(\"ReglerAktiv\", aktiv);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "9e746fb7159e492c",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change Max Power?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_maximale_einspeisung"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 300,
        "y": 2460,
        "wires": [
            [
                "3449af90d583c750"
            ]
        ]
    },
    {
        "id": "3449af90d583c750",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable Max Power",
        "func": "let wrmax = flow.get (\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\");\n//flow.set (\"Regelwert\", msg.payload); \nflow.set(\"MaxEinspeisung\", Math.max(wrmin,Math.min(msg.payload,wrmax)));\nmsg.payload = {einspeisewert: flow.get(\"MaxEinspeisung\")};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2460,
        "wires": [
            [
                "5cfcf573718eb3d5"
            ]
        ]
    },
    {
        "id": "468aa5952345cfac",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change Sollwert?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_sollwert"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 290,
        "y": 2500,
        "wires": [
            [
                "40a4a90fc6cbd15d"
            ]
        ]
    },
    {
        "id": "40a4a90fc6cbd15d",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable Sollwert",
        "func": "let soll = msg.payload;\nflow.set(\"Sollwert\", soll);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "168148af37ed1368",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Reglung aktiv?",
        "property": "ReglerAktiv",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 1920,
        "wires": [
            [
                "1e049cf62d58e43c"
            ],
            []
        ]
    },
    {
        "id": "c7ec3eef7ebbbfbe",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "a1160eda259de3ef",
        "name": "Reglungsalgorithmus On/Off",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.regler_aktiv"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1600,
        "y": 160,
        "wires": [
            [
                "2fc53edc55cab48e"
            ],
            [
                "9413afc1555f6ee5"
            ]
        ]
    },
    {
        "id": "60df30044c929c46",
        "type": "link in",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "link in 7",
        "links": [
            "68c44e68d8a62aa4",
            "1b49fc372d8175f7",
            "d4a5eb77aa517589",
            "9c1f091862872c3f",
            "f9c28e57357fbedd",
            "750f877240f66bc6"
        ],
        "x": 1525,
        "y": 1920,
        "wires": [
            [
                "e1823dbb1fbb80f7"
            ]
        ]
    },
    {
        "id": "68c44e68d8a62aa4",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "60df30044c929c46"
        ],
        "x": 1215,
        "y": 1960,
        "wires": []
    },
    {
        "id": "debab2e8e737f5d7",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Regelung aktiv?",
        "property": "ReglerAktiv",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 2460,
        "wires": [
            [],
            [
                "1b49fc372d8175f7"
            ]
        ]
    },
    {
        "id": "1b49fc372d8175f7",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "60df30044c929c46"
        ],
        "x": 1305,
        "y": 2460,
        "wires": []
    },
    {
        "id": "2c1c05176cc9fa40",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "HIER: WR Parameter setzen",
        "info": "",
        "x": 400,
        "y": 180,
        "wires": []
    },
    {
        "id": "5496fa05034dd5e0",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.increment",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.regler_inkrement"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "increment",
        "x": 2140,
        "y": 1980,
        "wires": [
            [
                "7f5bc6e47b11df44"
            ]
        ]
    },
    {
        "id": "4a08cb7d49d66609",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "d926ab42ae07f620",
        "name": "Reset 08:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 540,
        "wires": [
            [
                "1cf928d6ff176b91",
                "b35e0d2710be813a",
                "bca937b53d8c28ae",
                "197d6f4154e77e99"
            ]
        ]
    },
    {
        "id": "1cf928d6ff176b91",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "d926ab42ae07f620",
        "name": "Reset Inkrement",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.regler_inkrement"
        ],
        "labelId": [],
        "data": "{\"value\":0}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 2200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "5110fa7591c84b6b",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "HIER: Sensor des Smartmeters anpassen",
        "info": "",
        "x": 680,
        "y": 2020,
        "wires": []
    },
    {
        "id": "9413afc1555f6ee5",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "a1160eda259de3ef",
        "name": "Setze Grenze",
        "func": "let grenze = flow.get (\"MaxEinspeisung\"); //max.Einspeisung\nflow.set (\"MaxEinspeisungSave\", grenze);\nflow.set (\"Regelwert\", grenze);\nmsg.payload = {einspeisewert: grenze};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 180,
        "wires": [
            [
                "d4a5eb77aa517589"
            ]
        ]
    },
    {
        "id": "d4a5eb77aa517589",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "a1160eda259de3ef",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "60df30044c929c46"
        ],
        "x": 2325,
        "y": 140,
        "wires": []
    },
    {
        "id": "7097e2efb7e186dc",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "WR Paramater setzen",
        "func": "//Wechselrichterparameter:Anpassen\nflow.set(\"WRLeistung\", 650); //Maxleistung des WR in Watt\nflow.set(\"WRminLeistung\", 35); //Minleistung des WR in Watt\nflow.set(\"WRHersteller\", \"ABS\"); //Ich nutze einen WR mit absoluter Ansteuerung in Watt\n//flow.set(\"WRHersteller\", \"REL\"); //Ich nutze einen WR mit relativer Ansteuerung in %\nflow.set(\"SFMax\", 660); //SolarflowMax Output, wie eingestellt\n\n// flow.set(\"WRHersteller\", \"HOY\")\n\n//wrtyp wird über das Dashboard ermittelt\n// wrtyp 1: EZ1: APSYstemEZ1 absolute Einspeisung\n// wrtyp 2: HMS: Hoymiles HMS relative Einspeisung\n// wrtyp 3: OUT: Zendure Manager: AUS, outputlimit absolute Einspeisung\n// wrtyp 4: MAN: Zendure Manager Manuelle Leistungssteuerung\n// wrtyp 5: SMT: Zendure Manager Smarte Leistungssteuerung\n//flow.set(\"WRTyp\", 4); //Startkonfiguration / Default\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 220,
        "wires": [
            [
                "f5ac4859d53b8c34",
                "06635f54085d96a3"
            ]
        ]
    },
    {
        "id": "645676e2f7f3e8cf",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Uhrzeit1",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_datetime.regler1",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "date1",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 560,
        "y": 520,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "42fc7acb14089ef4",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Setze Flowvariablen",
        "func": "// Initialisiere\nflow.set(\"Date1\", msg.payload.date1.substring(0,5));\nflow.set(\"Date2\", msg.payload.date2.substring(0,5));\nflow.set(\"Date3\", msg.payload.date3.substring(0,5));\n\nlet wrmax = flow.get (\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\");\nflow.set(\"Wert1\", Math.min(msg.payload.wert1, wrmax));\nflow.set(\"Wert2\", Math.min(msg.payload.wert2, wrmax));\nflow.set(\"Wert3\", Math.min(msg.payload.wert3, wrmax));\nflow.set(\"WertBypass\", Math.min(msg.payload.wertbypass, wrmax));\nflow.set(\"Terminmodus\", msg.payload.termin);\nflow.set(\"MinimalEinspeisung\", msg.payload.minimal);\n\n//Bypass Sensor angelegt?, Wenn JA:\n//flow.set(\"Terminmodus\", \"on\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 640,
        "wires": [
            [
                "7a35a4cb11438e99"
            ]
        ]
    },
    {
        "id": "943544611b67c3df",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Uhrzeit2",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_datetime.regler2",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "date2",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 560,
        "y": 600,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "09dffc974b495c82",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Wert1",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_wert1_termin1",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "wert1",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "43418775b6507be1",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Wert2",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_wert2_termin2",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "wert2",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 550,
        "y": 640,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "958b193833400787",
        "type": "join",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 790,
        "y": 580,
        "wires": [
            [
                "42fc7acb14089ef4"
            ]
        ]
    },
    {
        "id": "cac27145bbce8069",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Uhrzeit3",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_datetime.regler3",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "date3",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 560,
        "y": 680,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "076b4e7072e40b12",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Wert3",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_wert3_termin3",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "wert3",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 550,
        "y": 720,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "95aae71aad83e480",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Date2",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_datetime.regler2"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 250,
        "y": 2900,
        "wires": [
            [
                "5720bb584469a627"
            ]
        ]
    },
    {
        "id": "b5bf8bcda7423569",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Date3",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_datetime.regler3"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 250,
        "y": 2940,
        "wires": [
            [
                "8b8f010a71a323a4"
            ]
        ]
    },
    {
        "id": "fa86dfe1511e4782",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Date1",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_datetime.regler1"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 250,
        "y": 2860,
        "wires": [
            [
                "85470c3b214d6856"
            ]
        ]
    },
    {
        "id": "e80f0135fcd06711",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Wert1",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_wert1_termin1"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 250,
        "y": 2980,
        "wires": [
            [
                "a9a461cbb8765f2b"
            ]
        ]
    },
    {
        "id": "e00a8abfacced21e",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Wert2",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_wert2_termin2"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 250,
        "y": 3020,
        "wires": [
            [
                "7da3b1748f25fccc"
            ]
        ]
    },
    {
        "id": "d3744680f9123907",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Wert3",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_wert3_termin3"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 250,
        "y": 3060,
        "wires": [
            [
                "8126e6438578eab3"
            ]
        ]
    },
    {
        "id": "85470c3b214d6856",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Flow-Variable Date1",
        "func": "flow.set(\"Date1\", msg.payload.substring(0,5));\n//msg.topic = \"Date1\";\n//msg.payload = flow.get(\"Date1\");\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "5720bb584469a627",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Flow-Variable Date2",
        "func": "flow.set(\"Date2\", msg.payload.substring(0,5));\n//msg.topic = \"Date2\";\n//msg.payload = flow.get(\"Date2\");\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "8b8f010a71a323a4",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Flow-Variable Date3",
        "func": "flow.set(\"Date3\", msg.payload.substring(0,5));\n//msg.topic = \"Date3\";\n//msg.payload = flow.get(\"Date3\");\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2940,
        "wires": [
            []
        ]
    },
    {
        "id": "a9a461cbb8765f2b",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Flow-Variable Wert1",
        "func": "let wrmax = flow.get (\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\"); \nflow.set(\"Wert1\", Math.max(wrmin,Math.min(msg.payload,wrmax)));\nmsg.topic = \"Wert1\";\nmsg.payload = flow.get(\"Wert1\");\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2980,
        "wires": [
            [
                "17d9fef67944a9b4"
            ]
        ]
    },
    {
        "id": "7da3b1748f25fccc",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Flow-Variable Wert2",
        "func": "let wrmax = flow.get (\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\"); \nflow.set(\"Wert2\", Math.max(wrmin,Math.min(msg.payload,wrmax)));\n//flow.set(\"Wert2\", msg.payload);\nmsg.topic = \"Wert2\";\nmsg.payload = flow.get(\"Wert2\");\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 3020,
        "wires": [
            [
                "17d9fef67944a9b4"
            ]
        ]
    },
    {
        "id": "8126e6438578eab3",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Flow-Variable Wert3",
        "func": "let wrmax = flow.get (\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\"); \nflow.set(\"Wert3\", Math.max(wrmin,Math.min(msg.payload,wrmax)));\n//flow.set(\"Wert3\", msg.payload);\nmsg.topic = \"Wert3\";\nmsg.payload = flow.get(\"Wert3\");\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 3060,
        "wires": [
            [
                "17d9fef67944a9b4"
            ]
        ]
    },
    {
        "id": "f07808beb37f2be1",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "6",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "7097e2efb7e186dc"
            ]
        ]
    },
    {
        "id": "46d329ad8dd32a6a",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "aktuelles DateX ermitteln",
        "func": "let date1 = flow.get(\"Date1\");\nlet date2 = flow.get(\"Date2\");\nlet date3 = flow.get(\"Date3\");\nlet wert1 = flow.get(\"Wert1\");\nlet wert2 = flow.get(\"Wert2\");\nlet wert3 = flow.get(\"Wert3\");\n\nlet grenze = flow.get(\"MaxEinspeisung\");\n\nvar currentTime = new Date();\n// Umwandeln in Format hh:mm\nvar hours = currentTime.getHours();\nvar minutes = currentTime.getMinutes();\nvar timeString = (hours<10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes);\nlet time = timeString;\n\nlet debug = flow.get(\"Debug\");\nif (debug) \n    {\n    node.warn({grenze, time, date1, date2, date3});\n    }\n\nswitch (time){\n    case date1:\n    {\n    let grenze = flow.get(\"Wert1\");\n    flow.set(\"MaxEinspeisung\", grenze);\n    flow.set(\"AktiverTermin\", \"Date1\");\n    msg.payload = {\n                einspeisewert: grenze,\n                aktivertermin: \"Date1\"\n            };\n    return msg;\n    }\n    case date2:\n    {\n    let grenze = flow.get(\"Wert2\");\n    flow.set(\"MaxEinspeisung\", grenze);\n    flow.set(\"AktiverTermin\", \"Date2\");\n    msg.payload = {\n                einspeisewert: grenze,\n                aktivertermin: \"Date2\"\n            };\n    return msg;\n    }\n    case date3:\n    {\n    let grenze = flow.get(\"Wert3\");\n    flow.set(\"MaxEinspeisung\", grenze);\n    flow.set(\"AktiverTermin\", \"Date3\");\n    msg.payload = {\n                einspeisewert: grenze,\n                aktivertermin: \"Date3\"\n            };\n    return msg;\n    }\n}\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 3420,
        "wires": [
            [
                "13698f3c995b927e",
                "f8a44280bd222a9e",
                "b521fd91073a57a3"
            ]
        ]
    },
    {
        "id": "b521fd91073a57a3",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "Terminmodus an?",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.regler_terminmodus",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "originalpayload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 3420,
        "wires": [
            [
                "5485cb51b64e87ef",
                "722460ce5b6e1c2d"
            ],
            []
        ]
    },
    {
        "id": "ca349456294f5c38",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "Setze Einspeisegrenze",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.regler_maximale_einspeisung"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1220,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "fca9127a7f61a1b8",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "3b8b8c73f8c2f645",
        "name": "Terminmodus=on?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.regler_terminmodus"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 290,
        "y": 3600,
        "wires": [
            [
                "2b9f6a16b9c71e0b"
            ],
            [
                "e6ea1346bc547904"
            ]
        ]
    },
    {
        "id": "e6ea1346bc547904",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3b8b8c73f8c2f645",
        "name": "Setze Grenze",
        "func": "//Wenn AUS, dann stelle alten Wert wieder her.\nlet grenze = flow.get (\"MaxEinspeisungSave\"); //max.Einspeisung\nmsg.payload = grenze;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 3620,
        "wires": [
            [
                "5dd4fe71b0a47034"
            ]
        ]
    },
    {
        "id": "5dd4fe71b0a47034",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "3b8b8c73f8c2f645",
        "name": "Setze EInspeisegrenze",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.regler_maximale_einspeisung"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 810,
        "y": 3600,
        "wires": [
            []
        ]
    },
    {
        "id": "2b9f6a16b9c71e0b",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3b8b8c73f8c2f645",
        "name": "Save letzte Grenze",
        "func": "//Wenn AN: Sichere die gesetzte MaxEInspeisung des Reglerbetriebes\nlet grenze = flow.get(\"MaxEinspeisung\");\nflow.set(\"MaxEinspeisungSave\",grenze);\n\n//Hole passende EInspeisegrene passend zum Termin\nlet aktiv = flow.get(\"AktiverTermin\");\nlet wert1 = flow.get(\"Wert1\");\nlet wert2 = flow.get(\"Wert2\");\nlet wert3 = flow.get(\"Wert3\");\n\nswitch (aktiv)\n    {\n    case \"Date1\":\n        flow.set(\"MaxEinspeisung\", wert1);\n        msg.payload = wert1;\n        break\n    case \"Date2\":\n        flow.set(\"MaxEinspeisung\", wert2);\n        msg.payload = wert2;\n        break\n    case \"Date3\":\n        flow.set(\"MaxEinspeisung\", wert3);\n        msg.payload = wert3;\n        break\n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3580,
        "wires": [
            [
                "5dd4fe71b0a47034"
            ]
        ]
    },
    {
        "id": "9e041a2a129bd5d1",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "Regelung aktiv?",
        "property": "ReglerAktiv",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 3480,
        "wires": [
            [],
            [
                "9c1f091862872c3f"
            ]
        ]
    },
    {
        "id": "9c1f091862872c3f",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "60df30044c929c46"
        ],
        "x": 1305,
        "y": 3480,
        "wires": []
    },
    {
        "id": "c29538ec26e2ffb7",
        "type": "link in",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "link in 12",
        "links": [
            "e170bc624eacf9aa"
        ],
        "x": 345,
        "y": 520,
        "wires": [
            [
                "645676e2f7f3e8cf",
                "09dffc974b495c82",
                "943544611b67c3df",
                "43418775b6507be1",
                "cac27145bbce8069",
                "076b4e7072e40b12",
                "60b5b7b848171b52",
                "a0f16c5abc5d653d",
                "25c2c1d8b0140bb9"
            ]
        ]
    },
    {
        "id": "7b4e9c68d230dfef",
        "type": "link in",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "link in 13",
        "links": [
            "f5ac4859d53b8c34",
            "b35e0d2710be813a",
            "b1f2ddda67ab1775",
            "20e1d26f9cfcb4d0"
        ],
        "x": 585,
        "y": 100,
        "wires": [
            [
                "0b1e18818ad83899",
                "914b9236075d8b71",
                "0265e5a3515f9ff8",
                "6fb0045e8cdc267c",
                "23e4362f7e76ec9f",
                "404d1730801695a8",
                "108e0ec12c031ce4",
                "1a09bce668c12667",
                "b4b07729dd9d31ee",
                "f64a874c50bdf191"
            ]
        ]
    },
    {
        "id": "f5ac4859d53b8c34",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "7b4e9c68d230dfef"
        ],
        "x": 525,
        "y": 100,
        "wires": []
    },
    {
        "id": "17d9fef67944a9b4",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Einspeisgrenze neu setzen",
        "func": "let terminmodus = flow.get (\"Terminmodus\");\n\n//Welcher Termin ist der Aktive?\nlet ac = flow.get(\"AktiverTermin\");\nconst wert1 = flow.get(\"Wert1\");\nconst wert2 = flow.get(\"Wert2\");\nconst wert3 = flow.get(\"Wert3\");\n\n    switch (ac)\n    {\n    case \"Date1\":\n        {\n        msg.payload = {einspeisewert: wert1};\n        //flow.set (\"MaxEinspeisung\", wert1);\n        return msg;\n        }\n    case \"Date2\":\n        {\n        msg.payload = {einspeisewert: wert2};\n        //flow.set (\"MaxEinspeisung\", wert2);\n        return msg;\n        }\n    case \"Date3\":\n        {\n        msg.payload = {einspeisewert: wert3};\n        //flow.set (\"MaxEinspeisung\", wert3);\n        return msg;\n        }\n    }\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 3020,
        "wires": [
            [
                "909de9d9437f09c6",
                "0d56421cb0e22b14"
            ]
        ]
    },
    {
        "id": "0d56421cb0e22b14",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Einspeisegrenze",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.regler_maximale_einspeisung"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1200,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "f75a8d621c76d26e",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Reglung aktiv?",
        "property": "ReglerAktiv",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 2960,
        "wires": [
            [],
            [
                "f9c28e57357fbedd"
            ]
        ]
    },
    {
        "id": "f9c28e57357fbedd",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "60df30044c929c46"
        ],
        "x": 1305,
        "y": 2960,
        "wires": []
    },
    {
        "id": "d5eeaf058038c14e",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "fa899eab480fd056",
        "name": "Termin ändert sich (Date x)?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_text.regler_timer_auswahl"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 320,
        "y": 3260,
        "wires": [
            [
                "cbe6d62869a9bbe6"
            ]
        ]
    },
    {
        "id": "cbe6d62869a9bbe6",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "fa899eab480fd056",
        "name": "Speicher Aktiven Termin",
        "func": "let date = msg.payload;\nflow.set (\"AktiverTermin\", date);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "f8a44280bd222a9e",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "Aktiver Termin",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_text.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_text.regler_timer_auswahl"
        ],
        "labelId": [],
        "data": "{ \"value\": payload.aktivertermin }",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_text",
        "service": "set_value",
        "x": 940,
        "y": 3360,
        "wires": [
            []
        ]
    },
    {
        "id": "23e4362f7e76ec9f",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "last",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_text.regler_timer_auswahl",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "last",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "77e722feaad4dffe",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 3360,
        "wires": [
            [
                "46d329ad8dd32a6a"
            ]
        ]
    },
    {
        "id": "304c27e2b8253ddc",
        "type": "catch",
        "z": "479e3443afedb613",
        "d": true,
        "g": "b5ff1f69caf7f3fb",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 260,
        "y": 3780,
        "wires": [
            [
                "eaa3ee5eb626fc27",
                "75c29f28532e7a32"
            ]
        ]
    },
    {
        "id": "eaa3ee5eb626fc27",
        "type": "debug",
        "z": "479e3443afedb613",
        "g": "b5ff1f69caf7f3fb",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 3760,
        "wires": []
    },
    {
        "id": "404d1730801695a8",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "wraus",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.regler_wr_aus",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "wraktiv",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 260,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "7a4cdab88b37efa4",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change Terminmodus?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.regler_terminmodus"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 300,
        "y": 2540,
        "wires": [
            [
                "ba6605545cfdfb18"
            ]
        ]
    },
    {
        "id": "ba6605545cfdfb18",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable Terminmodus",
        "func": "let termin = msg.payload;\nflow.set(\"Terminmodus\", termin);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "26c46f28a4782ba1",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change Wechserichter Aktiv?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.regler_wr_aus"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 320,
        "y": 2580,
        "wires": [
            [
                "6453649fc9e5f5f0"
            ]
        ]
    },
    {
        "id": "6453649fc9e5f5f0",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Global Variable WRAktiv",
        "func": "let wraktiv = msg.payload;\nglobal.set(\"WRAktiv\", wraktiv);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "13971ddb6ad995e2",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "WRAktiv An?",
        "property": "WRAktiv",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1920,
        "y": 1980,
        "wires": [
            [
                "5496fa05034dd5e0"
            ],
            []
        ]
    },
    {
        "id": "9e1f30a6ad96c325",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "HIER: Electriclevel Sensor prüfen",
        "info": "",
        "x": 330,
        "y": 900,
        "wires": []
    },
    {
        "id": "4119817686335d91",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "WR EZ1 Aus",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.solar_wechselrichterstatus"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_off",
        "x": 2590,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "3f310be62393785c",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "WR EZ1 ein",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.solar_wechselrichterstatus"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_on",
        "x": 2590,
        "y": 2240,
        "wires": [
            [
                "4ade168f633a49b7"
            ]
        ]
    },
    {
        "id": "df520bc5a9c771f0",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "WR AN/AUS?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.regler_wr_aus"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1830,
        "y": 2360,
        "wires": [
            [
                "05397794624406c5"
            ],
            [
                "8a4a05751fdc343f"
            ]
        ]
    },
    {
        "id": "6772ff6019665b83",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "HIER: WR Sensornamen für WR Ein/Aus prüfen",
        "info": "",
        "x": 2600,
        "y": 2200,
        "wires": []
    },
    {
        "id": "13698f3c995b927e",
        "type": "debug",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 3360,
        "wires": []
    },
    {
        "id": "54372a43b72a9c3a",
        "type": "debug",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "debug 18 (WR)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 2020,
        "wires": []
    },
    {
        "id": "b39b705f55bc143a",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "Shelly3EM ist da?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "device_tracker.wohnung_3em_pro"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "home",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1570,
        "y": 420,
        "wires": [
            [
                "1bdd52ee74cd6023"
            ],
            [
                "a62ebd85d47fee9f"
            ]
        ]
    },
    {
        "id": "354e9d385e0e7a12",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "HIER: WR DeviceTracker prüfen",
        "info": "",
        "x": 1610,
        "y": 380,
        "wires": []
    },
    {
        "id": "5cfcf573718eb3d5",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Bypass?",
        "property": "Bypass",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 2460,
        "wires": [
            [],
            [
                "debab2e8e737f5d7"
            ]
        ]
    },
    {
        "id": "909de9d9437f09c6",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Bypass?",
        "property": "Bypass",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 2960,
        "wires": [
            [],
            [
                "f75a8d621c76d26e"
            ]
        ]
    },
    {
        "id": "5485cb51b64e87ef",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "Bypass?",
        "property": "Bypass",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 3480,
        "wires": [
            [],
            [
                "9e041a2a129bd5d1"
            ]
        ]
    },
    {
        "id": "60b5b7b848171b52",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "2a3d8831dcef494e",
        "name": "ElectricLevel",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "num",
        "halt_if_compare": "is",
        "entity_id": "sensor.solarflow_electric_level",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "electriclevel",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 570,
        "y": 880,
        "wires": [
            [
                "2717c849e2440723"
            ]
        ]
    },
    {
        "id": "2717c849e2440723",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "2a3d8831dcef494e",
        "name": "Setze Flowvariablen",
        "func": "let level = msg.payload;\nif (level < 100)\n    {\n    flow.set(\"Bypass\", 0); //1 An; 0: Aus    \n    }\nelse \n    {\n    flow.set(\"Bypass\", 1); //1 An; 0: Aus    \n    }\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "e1823dbb1fbb80f7",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "WR Aktion",
        "func": "let debug = flow.get(\"Debug\");\nlet regelwert = msg.payload.einspeisewert;\nlet wrmax = flow.get(\"WRLeistung\");\nlet wrtyp = flow.get(\"WRTyp\");\nlet zielSensor;\n\nif (debug) {\n    node.warn (regelwert);\n    }\n\nswitch (wrtyp) {\n    case 1:\n        {\n            //absolute Einspeisung mit APSystem EZ1\n            zielSensor= flow.get (\"wrSensor_typ1\"); //Hole Sensorname\n            msg.payload = { \n                einspeisewert: regelwert,\n                sensor: zielSensor \n                };\n            return msg;\n        }\n    case 2:\n        {\n            //relative Einspeisung mit Hoymiles HMS\n            regelwert = (regelwert / wrmax * 100);\n            zielSensor= flow.get (\"wrSensor_typ2\"); //Hole Sensorname\n            msg.payload = { \n               einspeisewert: regelwert,\n               sensor: zielSensor \n               };\n            return msg;\n        }\n    case 3:\n        {\n            //absolute Einspeisung in Zendure Manager outputlimit\n            zielSensor= flow.get (\"wrSensor_typ3\"); //Hole Sensorname\n            //msg.payload = regelwert;\n            msg.payload = { \n               einspeisewert: regelwert,\n               sensor: zielSensor \n               };\n            return msg;\n        }\n    case 4:\n            //absolute Einspeisung in Zendure Manuelle Leistung\n        {\n            zielSensor= flow.get (\"wrSensor_typ4\"); //Hole Sensorname\n            //msg.payload = regelwert;\n            msg.payload = { \n                einspeisewert: regelwert,\n                sensor: zielSensor \n                };\n            return msg;\n        }\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1920,
        "wires": [
            [
                "54372a43b72a9c3a",
                "fc7613a47a09c1a6"
            ]
        ]
    },
    {
        "id": "05397794624406c5",
        "type": "change",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "WRAktiv",
                "pt": "global",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2060,
        "y": 2260,
        "wires": [
            [
                "2986171de753aadb"
            ]
        ]
    },
    {
        "id": "8a4a05751fdc343f",
        "type": "change",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "WRAktiv",
                "pt": "global",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2060,
        "y": 2400,
        "wires": [
            [
                "113787982a56301f"
            ]
        ]
    },
    {
        "id": "7a5d3ef92442a929",
        "type": "change",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "ReglerAktiv Off",
        "rules": [
            {
                "t": "set",
                "p": "ReglerAktiv",
                "pt": "flow",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 420,
        "wires": [
            [
                "750f877240f66bc6"
            ]
        ]
    },
    {
        "id": "8556d367c4b1fac5",
        "type": "change",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "ReglerAktiv ON",
        "rules": [
            {
                "t": "set",
                "p": "ReglerAktiv",
                "pt": "flow",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 320,
        "wires": [
            [
                "b1f2ddda67ab1775"
            ]
        ]
    },
    {
        "id": "a62ebd85d47fee9f",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "Setze WR auf FIX (70W)",
        "func": "msg.payload = {einspeisewert: 70};\nreturn msg; \n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 420,
        "wires": [
            [
                "7a5d3ef92442a929"
            ]
        ]
    },
    {
        "id": "750f877240f66bc6",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "60df30044c929c46"
        ],
        "x": 2305,
        "y": 420,
        "wires": []
    },
    {
        "id": "108e0ec12c031ce4",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "ignore",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.ignorebypass",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "ignore",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 300,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "f6f5cf5f1e5c7c22",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change IgnoreBypass",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.ignorebypass"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 300,
        "y": 2660,
        "wires": [
            [
                "af7cb14005ad7208"
            ]
        ]
    },
    {
        "id": "af7cb14005ad7208",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable IgnoreBypass",
        "func": "let ignore = msg.payload;\nflow.set(\"IgnoreBypass\", ignore);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2660,
        "wires": [
            []
        ]
    },
    {
        "id": "bae021af7ad4d4ea",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "d": true,
        "g": "46a88bad508d3778",
        "name": "Shelly3EM Power",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.shellypro3em_phase_a_active_power",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 650,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "b1f2ddda67ab1775",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "7b4e9c68d230dfef"
        ],
        "x": 2295,
        "y": 320,
        "wires": []
    },
    {
        "id": "b35e0d2710be813a",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "d926ab42ae07f620",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "7b4e9c68d230dfef"
        ],
        "x": 1705,
        "y": 580,
        "wires": []
    },
    {
        "id": "9b85d89c5ecbfb58",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "70cc64c2bba0fbd9",
        "name": "Einspeise Plus1PM ist da?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "device_tracker.shellyplus1pm_balkon"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "home",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1590,
        "y": 760,
        "wires": [
            [
                "93030162d5c5a12c",
                "919fb03d28bf7aba"
            ],
            [
                "93030162d5c5a12c",
                "919fb03d28bf7aba"
            ]
        ]
    },
    {
        "id": "93030162d5c5a12c",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "70cc64c2bba0fbd9",
        "name": "Erstelle Nachricht",
        "func": "//const entityId = msg.entity_id;\n//const entityId = msg.data.entity_id;\nconst entityId = msg.topic;\nconst payload = msg.payload;\n\nmsg.payload = {\n    title: \"Status ShellyDevices\",\n    message: `Entity: ${entityId} hat den Status '${payload}' erreicht.`\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 760,
        "wires": [
            [
                "03ed40ed26dd3a65"
            ]
        ]
    },
    {
        "id": "03ed40ed26dd3a65",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "70cc64c2bba0fbd9",
        "name": "Sende Notification",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "notify.persistent_notification",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "{\"title\":\"{{payload.title}}\", \"message\":\"{{payload.message}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "notify",
        "service": "persistent_notification",
        "target": {},
        "service_domain": "persistent_notification",
        "mergecontext": "",
        "x": 2250,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d99b35c545ee754a",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "70cc64c2bba0fbd9",
        "name": "Shelly3EM ist da?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "device_tracker.wohnung_3em_pro"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "home",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1610,
        "y": 800,
        "wires": [
            [
                "93030162d5c5a12c",
                "919fb03d28bf7aba"
            ],
            [
                "93030162d5c5a12c",
                "919fb03d28bf7aba"
            ]
        ]
    },
    {
        "id": "75c29f28532e7a32",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "b5ff1f69caf7f3fb",
        "name": "Debug & Log",
        "func": "// Debugnachricht erzeugen\n// node.warn(msg.payload);\nmsg.timestamp = Date.now();\nmsg.payload = JSON.stringify(msg, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3800,
        "wires": [
            [
                "ec50ae1b2f62c5ed"
            ]
        ]
    },
    {
        "id": "ec50ae1b2f62c5ed",
        "type": "file",
        "z": "479e3443afedb613",
        "g": "b5ff1f69caf7f3fb",
        "name": "In Datei schreiben",
        "filename": "/config/debug-log.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 830,
        "y": 3800,
        "wires": [
            []
        ]
    },
    {
        "id": "919fb03d28bf7aba",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "70cc64c2bba0fbd9",
        "name": "Debug & Log",
        "func": "// Debugnachricht erzeugen\n// node.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 800,
        "wires": [
            [
                "59f3b95dd2f0e022"
            ]
        ]
    },
    {
        "id": "59f3b95dd2f0e022",
        "type": "file",
        "z": "479e3443afedb613",
        "g": "70cc64c2bba0fbd9",
        "name": "In Datei schreiben",
        "filename": "/config/debug-log.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2250,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "240b1ea3948dee0a",
        "type": "debug",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 2100,
        "wires": []
    },
    {
        "id": "5689f66e1ce2031c",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Change ElectricLevel",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "sensor.solarflow_electric_level"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "1",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 300,
        "y": 2700,
        "wires": [
            [
                "45c911e07adc21ba"
            ]
        ]
    },
    {
        "id": "45c911e07adc21ba",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable Bypass",
        "func": "let level = Number(msg.payload);\nif (level < 100)\n    {\n    flow.set(\"Bypass\", 0); //1 An; 0: Aus   \n    return; //nichts senden \n    }\nelse \n    {\n    flow.set (\"Regelwert\", 0); // Wenn Akku voll WR zunächst runterregeln\n    flow.set(\"Bypass\", 1); //1 An; 0: Aus    \n    return [null, msg]; // nur an Ausgang zwei senden\n    }\n ",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 2700,
        "wires": [
            [],
            [
                "af1d76b72a7f2aca"
            ]
        ]
    },
    {
        "id": "a49dce0ccd7c992b",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "HIER: Electriclevel Sensor prüfen",
        "info": "",
        "x": 1190,
        "y": 2700,
        "wires": []
    },
    {
        "id": "e170bc624eacf9aa",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "c29538ec26e2ffb7"
        ],
        "x": 1125,
        "y": 320,
        "wires": []
    },
    {
        "id": "0cf6f523d136f7e5",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "d926ab42ae07f620",
        "name": "Täglicher Reset",
        "info": "",
        "x": 1560,
        "y": 580,
        "wires": []
    },
    {
        "id": "557b88a08fb680ad",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "RESET",
        "info": "",
        "x": 2290,
        "y": 280,
        "wires": []
    },
    {
        "id": "a0f16c5abc5d653d",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Wert Bypass",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_bypass",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "wertbypass",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 570,
        "y": 760,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "f76cb1b980c3bdf2",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "WertBypass",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_bypass"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 270,
        "y": 3100,
        "wires": [
            [
                "924fcf53aa0acbdc"
            ]
        ]
    },
    {
        "id": "924fcf53aa0acbdc",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Setze Flow-Variable WertBypass",
        "func": "let wrmax = flow.get (\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\"); \nflow.set(\"WertBypass\", Math.max(wrmin,Math.min(msg.payload,wrmax)));\nmsg.topic = \"WertBypass\";\nmsg.payload = flow.get(\"WertBypass\");\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3100,
        "wires": [
            [
                "5a619949abdec684"
            ]
        ]
    },
    {
        "id": "ee29490c9c4b5005",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "e1165b70369f2b1d",
        "name": "Setze WR auf 100W Ausgang",
        "func": "let regelwert = 100; // in Watt\nlet wrmax = 400; //MAX- WR\nregelwert = (regelwert / wrmax * 100); // in %\nmsg.payload = regelwert;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 4020,
        "wires": [
            [
                "041e921ba09a57a6"
            ]
        ]
    },
    {
        "id": "041e921ba09a57a6",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "e1165b70369f2b1d",
        "name": "Setze Hoymiles WR",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.dtu_leistungsbegrenzung"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 820,
        "y": 4020,
        "wires": [
            []
        ]
    },
    {
        "id": "3c960d972905ddd8",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "e1165b70369f2b1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 4020,
        "wires": [
            [
                "ee29490c9c4b5005"
            ]
        ]
    },
    {
        "id": "1f11ef02984634d4",
        "type": "http request",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Shelly 3EM Pro http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://192.168.178.117/rpc/EM.GetStatus?id=0",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 2060,
        "wires": [
            [
                "66a15f5adc0815dc",
                "3f77c130efc4805a"
            ]
        ]
    },
    {
        "id": "2fc53edc55cab48e",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "a1160eda259de3ef",
        "name": "Setze Grenze",
        "func": "let grenze = flow.get (\"MaxEinspeisungSave\")\nmsg.payload = {einspeisewert: grenze};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 120,
        "wires": [
            [
                "d4a5eb77aa517589"
            ]
        ]
    },
    {
        "id": "e2258c6eea29d2b9",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "3c31d8008dcaffaa",
        "name": "Setze WR EZ1 Output",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.solar_maximale_leistung"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "blockInputOverrides": false,
        "domain": "number",
        "service": "set_value",
        "target": {
            "entity_id": "number.dtu_leistungsbegrenzung"
        },
        "x": 820,
        "y": 4120,
        "wires": [
            []
        ]
    },
    {
        "id": "e7e9befaa8453b4d",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3c31d8008dcaffaa",
        "name": "Setze WR auf 600W Ausgang",
        "func": "let regelwert = 600;\nmsg.payload = { einspeisewert: regelwert };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 4120,
        "wires": [
            [
                "e2258c6eea29d2b9"
            ]
        ]
    },
    {
        "id": "0ec176a2fa37ecc0",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "3c31d8008dcaffaa",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 4120,
        "wires": [
            [
                "e7e9befaa8453b4d"
            ]
        ]
    },
    {
        "id": "367af67087a908a8",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "Manuell AUS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1830,
        "y": 2420,
        "wires": [
            [
                "8a4a05751fdc343f"
            ]
        ]
    },
    {
        "id": "3b9421d90a4b9fd3",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "Manuell EIN",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1830,
        "y": 2240,
        "wires": [
            [
                "05397794624406c5"
            ]
        ]
    },
    {
        "id": "9467d9f7df48e4e5",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "WR AN/AUS?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.regler_wr_aus"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "f5ac4859d53b8c34"
            ],
            []
        ]
    },
    {
        "id": "25c2c1d8b0140bb9",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "acff453100dcbbc9",
        "name": "Termin",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.regler_terminmodus",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "termin",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 550,
        "y": 800,
        "wires": [
            [
                "958b193833400787"
            ]
        ]
    },
    {
        "id": "2986171de753aadb",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "WRTyp",
        "property": "WRTyp",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 2260,
        "y": 2260,
        "wires": [
            [
                "3f310be62393785c"
            ],
            [
                "d75f80acac58c46f"
            ],
            [
                "2901366668454020"
            ]
        ]
    },
    {
        "id": "113787982a56301f",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "WRTyp",
        "property": "WRTyp",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 2260,
        "y": 2400,
        "wires": [
            [
                "4119817686335d91"
            ],
            [
                "88f0ebf6669abe2f"
            ],
            [
                "a3802b99388a73e1"
            ]
        ]
    },
    {
        "id": "d75f80acac58c46f",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "Hoymiles ein",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "button.press",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "button.wechselrichter_einschalten"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "button",
        "service": "press",
        "x": 2590,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "88f0ebf6669abe2f",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "Hoymiles Aus",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "button.press",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "button.wechselrichter_ausschalten"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "button",
        "service": "press",
        "x": 2600,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "722460ce5b6e1c2d",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "6e708c215cdbfc98",
        "name": "Einspeisgrenze neu setzen",
        "func": "let terminmodus = flow.get (\"Terminmodus\");\n\n//Welcher Termin ist der Aktive?\nlet ac = flow.get(\"AktiverTermin\");\nconst wert1 = flow.get(\"Wert1\");\nconst wert2 = flow.get(\"Wert2\");\nconst wert3 = flow.get(\"Wert3\");\n\n    switch (ac)\n    {\n    case \"Date1\":\n        {\n        msg.payload = {einspeisewert: wert1};\n        //flow.set (\"MaxEinspeisung\", wert1);\n        return msg;\n        }\n    case \"Date2\":\n        {\n        msg.payload = {einspeisewert: wert2};\n        //flow.set (\"MaxEinspeisung\", wert2);\n        return msg;\n        }\n    case \"Date3\":\n        {\n        msg.payload = {einspeisewert: wert3};\n        //flow.set (\"MaxEinspeisung\", wert3);\n        return msg;\n        }\n    }\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 3420,
        "wires": [
            [
                "ca349456294f5c38"
            ]
        ]
    },
    {
        "id": "df27770545d213b5",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "",
        "property": "WRTyp",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 730,
        "y": 1280,
        "wires": [
            [
                "df1e2cb0ac09ba12",
                "7d0404303c8fad6d",
                "b79ae4256daf27f6",
                "5c36c0c1bfabe8e7"
            ],
            [
                "df1e2cb0ac09ba12",
                "7d0404303c8fad6d",
                "5c36c0c1bfabe8e7",
                "b79ae4256daf27f6"
            ],
            [
                "e87564ebc6315033",
                "7d0404303c8fad6d",
                "df1e2cb0ac09ba12",
                "f81801a182e992f9"
            ],
            [
                "bf65d001e486db67",
                "df1e2cb0ac09ba12",
                "f81801a182e992f9",
                "5c36c0c1bfabe8e7"
            ],
            [
                "41f46826bd3b190e",
                "f81801a182e992f9"
            ],
            [
                "69c9aaf49d7fabba",
                "f81801a182e992f9"
            ]
        ]
    },
    {
        "id": "aebca2fa91b04224",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 1200,
        "wires": [
            [
                "dd3a208eb767c579"
            ]
        ]
    },
    {
        "id": "dd3a208eb767c579",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Regler Ausgang ermitteln",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.regler_ausgang",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 410,
        "y": 1120,
        "wires": [
            [
                "039ee9a7ab711a33"
            ]
        ]
    },
    {
        "id": "80276a25567d0ce3",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Setze Ausgansglimit SF",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 1270,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "b2f2791b82ef1fd9",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "7d73a67d14204ea2",
        "name": "surfers Regelsystem OFF",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.regler_aktiv"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_boolean",
        "service": "turn_off",
        "x": 390,
        "y": 1600,
        "wires": [
            [
                "68eb3e92f051ff26"
            ]
        ]
    },
    {
        "id": "df1e2cb0ac09ba12",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "surfers Regelsystem ON",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.regler_aktiv"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 1110,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "7d0404303c8fad6d",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Setze Zendure Mode Off",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.zendure_manager_operation"
        ],
        "labelId": [],
        "data": "{\"option\":\"off\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "select",
        "service": "select_option",
        "x": 1110,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "44725bc13c3d9599",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Setze Zendure Manual",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.zendure_manager_operation"
        ],
        "labelId": [],
        "data": "{\"option\":\"manual\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "select",
        "service": "select_option",
        "x": 1240,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "b79ae4256daf27f6",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set WR auf: 80W",
        "func": "//Typ1 oder Typ2 WR\n//die WR sollen initialisiert werden mit einer Vorgabe\n//Regelwert wird auf 80W gesetzt\n//die Regelung übernimmt dann die Bildung des Regelwertes von diesem Ausgangswert\n\nflow.set(\"Regelwert\", 80); //80W\nlet wrmax = flow.get(\"WRLeistung\");\nlet leistung = flow.get(\"Regelwert\");\nlet wrhersteller = flow.get(\"WRHersteller\");\nlet zielSensor = \"ABS\";\n\nswitch (wrhersteller)\n    {\n    case \"ABS\":\n        zielSensor = flow.get(\"wrSensor_typ1\");\n        msg.payload = {\n        einspeisewert: leistung,\n        sensor: zielSensor};\n        // node.warn(leistung);\n        return msg;\n        \n    case \"REL\":\n        zielSensor = flow.get(\"wrSensor_typ2\");\n        leistung = Math.round((leistung / wrmax) * 100); //10% = 80W\n        msg.payload = {\n        einspeisewert: leistung,\n        sensor: zielSensor};\n        // node.warn(leistung);\n        return msg;\n        \n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1000,
        "wires": [
            [
                "e6c67233c1c5b911"
            ]
        ]
    },
    {
        "id": "e87564ebc6315033",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set WRTyp 3: 80",
        "func": "flow.set(\"WRTyp\", 3);\nflow.set(\"Regelwert\", 80);\nlet zielSensor = flow.get(\"wrSensor_typ3\");\n\nmsg.payload = {\n    einspeisewert: 80,\n    sensor: zielSensor\n};\n//msg.payload = {sensor: zielSensor};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1240,
        "wires": [
            [
                "80276a25567d0ce3"
            ]
        ]
    },
    {
        "id": "bf65d001e486db67",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set WRTyp 4: 80",
        "func": "flow.set(\"WRTyp\", 4);\nflow.set(\"Regelwert\", 80);\nlet zielSensor = flow.get(\"wrSensor_typ4\");\nlet wrmax = flow.get (\"Regelwert\");\n\nmsg.payload = {\n    einspeisewert: wrmax,\n    sensor: zielSensor\n};\n//msg.payload = {sensor: zielSensor};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1580,
        "wires": [
            [
                "44725bc13c3d9599",
                "ec84cf4771cfbcac"
            ]
        ]
    },
    {
        "id": "51239912e3877c4d",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Regler Ausgang übertragen",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_select.regler_ausgang"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 400,
        "y": 1380,
        "wires": [
            [
                "039ee9a7ab711a33"
            ]
        ]
    },
    {
        "id": "039ee9a7ab711a33",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "WRTyp ermitteln",
        "func": "let typ = msg.payload;\n//node.warn (typ);\nswitch (typ)\n    {\n    case \"AUS\":\n       {\n       flow.set(\"WRTyp\", 0)\n       msg.payload = 0;\n       flow.set(\"Reglerkp\", 1);\n       return msg;\n       }\n    case \"EZ1\":\n       {\n       flow.set(\"WRTyp\", 1)\n       msg.payload = 1;\n       flow.set(\"Reglerkp\", 1);\n       return msg;\n       }\n    case \"HMS\":\n       {\n       flow.set(\"WRTyp\", 2)\n       msg.payload = 2;\n       flow.set(\"Reglerkp\", 1);\n       return msg;\n       }\n    case \"OUT\":\n       {\n       flow.set(\"WRTyp\", 3)\n       msg.payload = 3;\n       flow.set(\"Reglerkp\", 1);\n       return msg;\n       }\n    case \"MAN\":\n       {\n       flow.set(\"WRTyp\", 4)\n       flow.set(\"Reglerkp\", 0.8);\n       msg.payload = 4;\n       return msg;\n       }\n    case \"SMT\":\n       {\n       flow.set(\"WRTyp\", 5)\n       msg.payload = 5;\n       return msg;\n       }\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1280,
        "wires": [
            [
                "df27770545d213b5"
            ]
        ]
    },
    {
        "id": "d9fb180bd5fd6ff8",
        "type": "link in",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "link in 11",
        "links": [
            "06635f54085d96a3"
        ],
        "x": 225,
        "y": 1040,
        "wires": [
            [
                "dd3a208eb767c579",
                "25fc412c23c1d980"
            ]
        ]
    },
    {
        "id": "06635f54085d96a3",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "d9fb180bd5fd6ff8"
        ],
        "x": 515,
        "y": 280,
        "wires": []
    },
    {
        "id": "f988239e95dc5426",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set HMS MAX",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 1240,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "db71458988a0ae4a",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Bypass?",
        "property": "Bypass",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 1920,
        "wires": [
            [
                "4f2a4b1d2bb4a50a"
            ],
            [
                "2c22eb5a28b88af3"
            ]
        ]
    },
    {
        "id": "4f2a4b1d2bb4a50a",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Bypass-Handling",
        "func": "let debug = flow.get(\"Debug\");\nlet wrmax = flow.get (\"WRLeistung\"); //max. WR Leistung in W\nlet wertbypass = flow.get (\"WertBypass\"); //Begrenzung im Bypass\n//flow.set (\"MaxEinspeisung\", wertbypass);\nlet fehler;\n\n//letzte Einstellung des WR laden\nlet vorher = flow.get(\"Regelwert\");\nlet neu = vorher + 50;\nneu = Math.min( wrmax, neu);\nneu = Math.min(neu, wertbypass);\n//neu = wrmax;\nflow.set(\"Regelwert\", neu);\n//Wenn sich der Reglewert nicht gändert hat: Ignore\nlet diff = neu - vorher; \n\nif (debug) {\nnode.warn ({diff, vorher, fehler, wertbypass, neu});\n}\n\nif (diff != 0)\n    {\n    msg.payload = {einspeisewert: neu};\n    return msg;\n    }\nreturn;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1900,
        "wires": [
            [
                "68c44e68d8a62aa4"
            ]
        ]
    },
    {
        "id": "41f46826bd3b190e",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "7d73a67d14204ea2",
        "name": "Set WRTyp 5",
        "func": "flow.set(\"WRTyp\", 5);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1560,
        "wires": [
            [
                "b2f2791b82ef1fd9"
            ]
        ]
    },
    {
        "id": "fc7613a47a09c1a6",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "WRTyp nicht AUS?",
        "property": "WRTyp",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1840,
        "y": 1920,
        "wires": [
            [
                "13971ddb6ad995e2"
            ],
            []
        ]
    },
    {
        "id": "68eb3e92f051ff26",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "7d73a67d14204ea2",
        "name": "Setze Zendure Smart",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.zendure_manager_operation"
        ],
        "labelId": [],
        "data": "{\"option\":\"smart\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "select",
        "service": "select_option",
        "x": 380,
        "y": 1640,
        "wires": [
            [
                "d36943bed8f6d1b6"
            ]
        ]
    },
    {
        "id": "e6c67233c1c5b911",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Setze WR ",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "blockInputOverrides": false,
        "domain": "number",
        "service": "set_value",
        "target": {
            "entity_id": "number.dtu_leistungsbegrenzung"
        },
        "x": 1200,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "ec84cf4771cfbcac",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Zendure Manual 80W",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 1240,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "edcb9390f933d4b7",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "Initialisierung",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_button.regler_init"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "7097e2efb7e186dc"
            ]
        ]
    },
    {
        "id": "82e6e623f87b357b",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "PI-Regler",
        "func": "// PI-Regler\nlet debug = flow.get(\"Debug\");\nlet wrmax = flow.get(\"WRLeistung\");       // max. WR-Leistung in W\nlet wrmin = flow.get(\"WRminLeistung\");    // min. WR-Leistung in W\nlet soll = flow.get(\"Sollwert\");          // Sollwert in W\nlet grenze = flow.get(\"MaxEinspeisung\");  // max. Einspeisung in W\nlet hyst = global.get(\"Hysterese\");       // Hysteresebereich\n\n// Regler-Parameter\nlet Kp = 0.8;      // Proportionalanteil\nlet Ki = 0.1;      // Integralanteil (z. B. 0.1 für moderates Verhalten)\n\n// Hole bisherige Werte\nlet vorher = flow.get(\"Regelwert\") || 0;\nlet I_summe = Math.round(flow.get(\"I_summe\")) || 0;\n\n// Messwert Smartmeter\nlet leistung = Number(msg.payload.total_act_power);\nflow.set(\"3em\", leistung);\n\n// Fehlerberechnung\nlet fehler = Math.round(soll - leistung);\n\n// Optional: Hysterese einbauen (kein I-Update im Totband)\nif (Math.abs(fehler) < hyst) {\n    fehler = 0;\n}\nflow.set(\"fehler\", fehler);\n\n// Integriere den Fehler (I-Anteil)\nI_summe += fehler;\nflow.set(\"I_summe\", I_summe);\n\n// PI-Regelung: u = Kp * fehler + Ki * ∑fehler\nlet neu = Math.round(vorher - Kp * fehler - Ki * I_summe);\n\n// Sättigung\nneu = Math.max(wrmin, Math.min(wrmax, neu));\nneu = Math.min(neu, grenze);\n\n// Optional: Anti-Windup → Wenn neu an Grenze, I-Anteil nicht weiter aufsummieren\nif (neu === wrmin || neu === wrmax || neu === grenze) {\n    I_summe -= fehler; // Fehler zurücknehmen\n    flow.set(\"I_summe\", I_summe);\n}\n\nflow.set(\"Regelwert\", neu);\n\n// Prüfe Änderung\nlet diff = neu - vorher;\n\nif (debug) {\n    node.warn({ diff, vorher, fehler, I_summe, grenze, neu });\n}\n\nif (diff !== 0) {\n    msg.payload = { einspeisewert: neu };\n    return msg;\n}\n\nreturn;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2060,
        "wires": [
            [
                "68c44e68d8a62aa4",
                "240b1ea3948dee0a"
            ]
        ]
    },
    {
        "id": "66a15f5adc0815dc",
        "type": "debug",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1960,
        "wires": []
    },
    {
        "id": "be89d5ddb5c4de40",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "PID-Regler",
        "func": "let debug = flow.get(\"Debug\");\nlet wrmax = flow.get(\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\");\nlet soll = flow.get(\"Sollwert\");\nlet grenze = flow.get(\"MaxEinspeisung\");\nlet hyst = global.get(\"Hysterese\");\n\n// Reglerparameter\nlet Kp = 0.9;       // Proportional\nlet Ki = 0.1;       // Integral\nlet Kd = 0.3;       // Derivativ\nlet D_Filter = 0.2; // Glättungsfaktor (0.0 = stark gefiltert, 1.0 = roh)\n\n// Historische Werte\nlet vorher = flow.get(\"Regelwert\") || 0;\nlet I_summe = flow.get(\"I_summe\") || 0;\nlet letzterFehler = flow.get(\"letzterFehler\") || 0;\nlet letzterD = flow.get(\"letzterD\") || 0;\n\n// Aktueller Messwert\nlet leistung = Number(msg.payload.total_act_power);\nflow.set(\"3em\", leistung);\nlet fehler = Math.round(soll - leistung);\n\n// Hysteresezone beachten\nif (Math.abs(fehler) < hyst) {\n    fehler = 0;\n}\nflow.set(\"fehler\", fehler);\n\n// I-Anteil: Fehler aufsummieren\nI_summe += fehler;\nflow.set(\"I_summe\", I_summe);\n\n// D-Anteil: Änderung des Fehlers berechnen\nlet dFehler = Math.round(fehler - letzterFehler);\nlet D_roh = Kd * dFehler;\n\n// Glättung (D-Filter, gegen Rauschen)\nlet D = D_Filter * D_roh + (1 - D_Filter) * letzterD;\nflow.set(\"letzterD\", D);\nflow.set(\"letzterFehler\", fehler);\n\n// PID-Regelung\nlet neu = Math.round(vorher - Kp * fehler - Ki * I_summe - D);\n\n// Sättigung\nneu = Math.max(wrmin, Math.min(wrmax, neu));\nneu = Math.min(neu, grenze);\n\n// Anti-Windup\nif (neu === wrmin || neu === wrmax || neu === grenze) {\n    I_summe -= Math.round(fehler);\n    flow.set(\"I_summe\", I_summe);\n}\n\nflow.set(\"Regelwert\", neu);\n\n// Änderung prüfen\nlet diff = neu - vorher;\n\nif (debug) {\n    node.warn({ diff, vorher, fehler, I_summe, D, neu });\n}\n\nif (diff !== 0) {\n    msg.payload = { einspeisewert: neu };\n    return msg;\n}\n\nreturn;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2100,
        "wires": [
            [
                "68c44e68d8a62aa4",
                "240b1ea3948dee0a"
            ]
        ]
    },
    {
        "id": "5a619949abdec684",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "035acd6f5889242d",
        "name": "Einspeisgrenze neu setzen",
        "func": "//Wenn AUS, dann stelle alten Wert wieder her.\nlet grenze = flow.get (\"WertBypass\"); //max.Einspeisung\nmsg.payload = {einspeisewert: grenze};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "f6b17c0a7515dc64",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Debugzeile bauen",
        "func": "let debug = flow.get(\"Debug\");\nlet einspeisewert = flow.get (\"Plus1pm\");\nlet bypass = flow.get(\"Bypass\");\nlet wrtyp = flow.get(\"WRTyp\");\nlet wrher = flow.get (\"WRHersteller\")\nlet wrmax = flow.get(\"WRLeistung\");\nlet wrmin = flow.get(\"WRminLeistung\");\nlet regler_aktiv = flow.get(\"ReglerAktiv\");\nlet termin_on = flow.get(\"Terminmodus\");\nlet max_einspeisung = flow.get(\"MaxEinspeisung\");\nlet regelwert = flow.get(\"Regelwert\");\nlet drei_em = flow.get (\"3em\");\nlet soll = flow.get(\"Sollwert\");\nlet wr_aktiv = global.get ( \"WRAktiv\");\nlet fehler = flow.get (\"fehler\");\n\nlet timestamp = new Date().toISOString();\n\nif (debug){\n    msg.payload = `${timestamp}, Bypass=${bypass}, WRTyp=${wrtyp}, WRHersteller=${wrher}; WRMax=${wrmax}, WRMin=${wrmin}, WRAktiv=${wr_aktiv} , ReglerAktiv=${regler_aktiv}, Termin=${termin_on}, MaxEinspeisung=${max_einspeisung}, Sollwert=${soll}, Fehler=${fehler}, Regelwert=${regelwert}, Einspeisewert=${einspeisewert}, Smartmeter=${drei_em}`;\n    return msg\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1840,
        "wires": [
            [
                "78dbc119241bb5d0"
            ]
        ]
    },
    {
        "id": "78dbc119241bb5d0",
        "type": "file",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "In Datei schreiben",
        "filename": "/config/debug-log1.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1110,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "7e065cdfb6cd92bd",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "if Debug?",
        "func": "if (flow.get(\"Debug\") === true) {\n    return [msg, null]; // an Ausgang eins senden\n    }\nelse {\n    return; // nichts senden\n    }",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1840,
        "wires": [
            [
                "f6b17c0a7515dc64"
            ],
            []
        ]
    },
    {
        "id": "af1d76b72a7f2aca",
        "type": "delay",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "",
        "pauseType": "delay",
        "timeout": "180",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 2700,
        "wires": [
            [
                "20e1d26f9cfcb4d0"
            ]
        ]
    },
    {
        "id": "20e1d26f9cfcb4d0",
        "type": "link out",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "7b4e9c68d230dfef"
        ],
        "x": 1005,
        "y": 2700,
        "wires": []
    },
    {
        "id": "2901366668454020",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "ABS or REL",
        "property": "WRHersteller",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "ABS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REL",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 2410,
        "y": 2280,
        "wires": [
            [
                "3f310be62393785c"
            ],
            [
                "d75f80acac58c46f"
            ]
        ]
    },
    {
        "id": "a3802b99388a73e1",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "ABS or REL",
        "property": "WRHersteller",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "ABS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REL",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 2410,
        "y": 2420,
        "wires": [
            [
                "4119817686335d91"
            ],
            [
                "88f0ebf6669abe2f"
            ]
        ]
    },
    {
        "id": "f81801a182e992f9",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "",
        "property": "WRHersteller",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "ABS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REL",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1420,
        "wires": [
            [
                "bd67f151a7c8bdbe"
            ],
            [
                "9e26b0c7a7787d25"
            ]
        ]
    },
    {
        "id": "ae2d81258bd8fae4",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Setze WR EZ1 MAX",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "blockInputOverrides": false,
        "domain": "number",
        "service": "set_value",
        "target": {
            "entity_id": "number.dtu_leistungsbegrenzung"
        },
        "x": 1260,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "1a09bce668c12667",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "typ",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.regler_typ",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "typ",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 710,
        "y": 340,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "3f77c130efc4805a",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "",
        "property": "ReglerTyp",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "P",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PID",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 850,
        "y": 2060,
        "wires": [
            [
                "3"
            ],
            [
                "82e6e623f87b357b"
            ],
            [
                "be89d5ddb5c4de40"
            ]
        ]
    },
    {
        "id": "91570a4c78376cef",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Setze WR auf 600W Ausgang",
        "func": "let regelwert = 600;\n\nlet zielSensor = \"number.solar_maximale_leistung\";\n\nmsg.payload = {\n    einspeisewert: regelwert,\n    sensor: zielSensor\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 4200,
        "wires": [
            [
                "e25dd8e781b3f57d"
            ]
        ]
    },
    {
        "id": "1c1b6369a59eabbe",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 4200,
        "wires": [
            [
                "91570a4c78376cef"
            ]
        ]
    },
    {
        "id": "e25dd8e781b3f57d",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Setze WR EZ1 Output (dynamisch)",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": {{ payload.einspeisewert }}}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "blockInputOverrides": false,
        "domain": "number",
        "service": "set_value",
        "target": {
            "entity_id": "{{ payload.sensor }}"
        },
        "x": 820,
        "y": 4200,
        "wires": [
            []
        ]
    },
    {
        "id": "fc9dbf8b3b334185",
        "type": "ha-get-entities",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Hole Sensor",
        "server": "285afb99.5208c4",
        "version": 1,
        "rules": [
            {
                "condition": "state_object",
                "property": "entity_id",
                "logic": "is",
                "value": "einspeiseSensor",
                "valueType": "flow"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 530,
        "y": 4260,
        "wires": [
            [
                "e452733f940cf159"
            ]
        ]
    },
    {
        "id": "e452733f940cf159",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Ausgabe",
        "func": "let power = Number(msg.payload[0].state);\n\nnode.warn (power);\n\nif (power > 2) {\n    node.warn (\">2\")\n    return [msg , null];\n    }\nelse {\n    node.warn (\"<2\")\n    return [null ,msg];\n    }\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 4260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bb929c7f2e0a7c3f",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 4260,
        "wires": [
            [
                "fc9dbf8b3b334185"
            ]
        ]
    },
    {
        "id": "25fc412c23c1d980",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Sensornamen setzen",
        "func": "//Hier die exakten Sensornamen Eurer Ausgabegeräte eintragen\n//typ3 und typ4 sind die Sensoren der Z-HA-Integration\n//typ1 spricht Sensoren absolut an (in Watt)\n//typ2 spricht Sensoren relativ an (in %)\nflow.set (\"einspeiseSensor\", \"sensor.solarhub_power\"); // mein ShellyPlus1PM hinterm Hub/Wechselrichter\nflow.set (\"wrSensor_typ1\", \"number.solar_maximale_leistung\"); // mein APSystemEZ1\nflow.set (\"wrSensor_typ2\", \"number.dtu_leistungsbegrenzung\"); // mein HMS8002T\nflow.set (\"wrSensor_typ3\", \"number.solarherwegh_output_limit\"); // Z-HA Integratiom, Sensor für OUTPUT-Limit des Hubs\nflow.set (\"wrSensor_typ4\", \"number.zendure_manager_manual_power\"); // Z-HA Integratiom, Sensor für manuelle Leistungssteuerung\nflow.set (\"zHAVolMinSensor\", \"number.solarherwegh_min_soc\" ); // Z-HA Integration, Sensor für Entladegrenze\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1040,
        "wires": [
            [
                "e01d8fa50d01f508"
            ]
        ]
    },
    {
        "id": "4d018375ab818129",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "HIER: Sensornamen anpassen",
        "info": "",
        "x": 490,
        "y": 1000,
        "wires": []
    },
    {
        "id": "bd67f151a7c8bdbe",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set WR Typ 1: Max",
        "func": "let zielSensor = flow.get(\"wrSensor_typ1\");\nlet wrmax = flow.get (\"WRLeistung\");\n\nmsg.payload = {\n    einspeisewert: wrmax,\n    sensor: zielSensor\n};\n//msg.payload = {sensor: zielSensor};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1360,
        "wires": [
            [
                "ae2d81258bd8fae4"
            ]
        ]
    },
    {
        "id": "9e26b0c7a7787d25",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set WR Typ 2: Max",
        "func": "let zielSensor = flow.get(\"wrSensor_typ2\");\nlet wrmax = 100;\n\nmsg.payload = {\n    einspeisewert: wrmax,\n    sensor: zielSensor\n};\n//msg.payload = {sensor: zielSensor};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1480,
        "wires": [
            [
                "f988239e95dc5426"
            ]
        ]
    },
    {
        "id": "5c36c0c1bfabe8e7",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set WR Typ 3: Max",
        "func": "// Wenn ty1 oder typ2 oder typ4 dann Solarflow Outputlimit setzen auf MAX\n\nlet zielSensor = flow.get(\"wrSensor_typ3\");\nlet sflimit = flow.get (\"SFMax\");\n\nmsg.payload = { \n    einspeisewert: sflimit,\n    sensor: zielSensor \n    };\n//msg.payload = {sensor: zielSensor};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1280,
        "wires": [
            [
                "80276a25567d0ce3"
            ]
        ]
    },
    {
        "id": "7f5bc6e47b11df44",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "Setze Ausgang",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "blockInputOverrides": false,
        "domain": "number",
        "service": "set_value",
        "target": {
            "entity_id": "number.dtu_leistungsbegrenzung"
        },
        "x": 2390,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "b78e47bc659c68e6",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "70cc64c2bba0fbd9",
        "name": "HIER: WR DeviceTracker prüfen",
        "info": "",
        "x": 1610,
        "y": 860,
        "wires": []
    },
    {
        "id": "0d452cdc92314b7d",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "0ebb8e7b772678cd",
        "name": "Wenn Sensornamen in 1.3. gut gepflegt, dann läuft die Routine generisch",
        "info": "",
        "x": 2250,
        "y": 1920,
        "wires": []
    },
    {
        "id": "2c22eb5a28b88af3",
        "type": "ha-get-entities",
        "z": "479e3443afedb613",
        "g": "d8febfbf64f9a1dc",
        "name": "Hole Daten",
        "server": "285afb99.5208c4",
        "version": 1,
        "rules": [
            {
                "condition": "state_object",
                "property": "entity_id",
                "logic": "is",
                "value": "einspeiseSensor",
                "valueType": "flow"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 350,
        "y": 2020,
        "wires": [
            [
                "76f6c97f59e020a9"
            ]
        ]
    },
    {
        "id": "76f6c97f59e020a9",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "d8febfbf64f9a1dc",
        "name": "Sensor-ID aus Flow",
        "func": "let power = Number(msg.payload[0].state);\nflow.set(\"Plus1pm\", power);\n//node.warn (power);\n\nif (power > 2) {\n    return [msg , null];\n    }\nelse {\n    return [null ,msg];\n    }\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2080,
        "wires": [
            [
                "1f11ef02984634d4"
            ],
            []
        ]
    },
    {
        "id": "6bd08e9d0b68c8e0",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Setz URL",
        "func": "flow.set (\"Smartmeter\", \"http://192.168.178.117/rpc/EM.GetStatus?id=0\")\nmsg.url = flow.get (\"Smartmeter\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 4320,
        "wires": [
            [
                "3c8cabaa304bd745"
            ]
        ]
    },
    {
        "id": "3c8cabaa304bd745",
        "type": "http request",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Shelly 3EM Pro http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 4320,
        "wires": [
            [
                "2940a6546713a79a"
            ]
        ]
    },
    {
        "id": "2940a6546713a79a",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Ausgabe",
        "func": "let leistung = Number(msg.payload.total_act_power);\n\nnode.warn (leistung);\n\nreturn",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 4320,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a056e94e32dc397e",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 4320,
        "wires": [
            [
                "6bd08e9d0b68c8e0"
            ]
        ]
    },
    {
        "id": "d36943bed8f6d1b6",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "7d73a67d14204ea2",
        "name": "Regler WR An",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.regler_wr_aus"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 360,
        "y": 1680,
        "wires": [
            [
                "3cd125758b237fce"
            ]
        ]
    },
    {
        "id": "3cd125758b237fce",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set SF out Max",
        "func": "// Wenn ty1 oder typ2 oder typ4 dann Solarflow Outputlimit setzen auf MAX\n\nlet zielSensor = flow.get(\"wrSensor_typ3\");\nlet sflimit = flow.get (\"SFMax\");\n\nmsg.payload = { \n    einspeisewert: sflimit,\n    sensor: zielSensor \n    };\n//msg.payload = {sensor: zielSensor};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1680,
        "wires": [
            [
                "810f769ffce8a701"
            ]
        ]
    },
    {
        "id": "810f769ffce8a701",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Setze Ausgansglimit SF",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 870,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "0a3fd6bcfaa113dc",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Setze WR auf 100W Ausgang",
        "func": "let regelwert = 100;\nlet wrmax = 400; //MAX- WR\n\nregelwert = regelwert/wrmax * 100;\n\nlet zielSensor = \"number.dtu_leistungsbegrenzung\";\n\nmsg.payload = {\n    einspeisewert: regelwert,\n    sensor: zielSensor\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 4380,
        "wires": [
            [
                "ac712f39db9196a3"
            ]
        ]
    },
    {
        "id": "8670dc77189b5b5f",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 4380,
        "wires": [
            [
                "0a3fd6bcfaa113dc"
            ]
        ]
    },
    {
        "id": "ac712f39db9196a3",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "3ce9227ad71245e3",
        "name": "Setze WR HMS Output (dynamisch)",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": {{ payload.einspeisewert }}}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "blockInputOverrides": false,
        "domain": "number",
        "service": "set_value",
        "target": {
            "entity_id": "{{ payload.sensor }}"
        },
        "x": 830,
        "y": 4380,
        "wires": [
            []
        ]
    },
    {
        "id": "7a35a4cb11438e99",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "d": true,
        "g": "acff453100dcbbc9",
        "name": "Terminmodus An",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.regler_terminmodus"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 930,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9bcffdcf2913b47b",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Minimal Einspeisung",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.regler_minimale_einspeisung"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 290,
        "y": 2620,
        "wires": [
            [
                "15951ffac0a8ed47"
            ]
        ]
    },
    {
        "id": "15951ffac0a8ed47",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Setze Flow-Variable MinimalEinspeisung",
        "func": "let minimal = Number(msg.payload);\nflow.set(\"MinEinspeisung\", minimal);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "b4b07729dd9d31ee",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "minimal",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.regler_minimale_einspeisung",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "minimal",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 720,
        "y": 380,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "30471465b9e6510f",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "APSystem home?",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "device_tracker.apsystems_2"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "home",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1610,
        "y": 2320,
        "wires": [
            [
                "36f3252fb4621270"
            ],
            []
        ]
    },
    {
        "id": "36f3252fb4621270",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "WR AN/AUS?",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.regler_wr_aus",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1820,
        "y": 2300,
        "wires": [
            [
                "05397794624406c5"
            ],
            [
                "8a4a05751fdc343f"
            ]
        ]
    },
    {
        "id": "bca937b53d8c28ae",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "d926ab42ae07f620",
        "name": "Sollwert = 5",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.regler_sollwert"
        ],
        "labelId": [],
        "data": "{\"value\":5}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 2190,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "69c9aaf49d7fabba",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "cf998755e26fe945",
        "name": "Set SF out 100",
        "func": "// Wenn ty1 oder typ2 oder typ4 dann Solarflow Outputlimit setzen auf MAX\n\nlet zielSensor = flow.get(\"wrSensor_typ3\");\nlet sflimit = 100;\n\nmsg.payload = { \n    einspeisewert: sflimit,\n    sensor: zielSensor \n    };\n//msg.payload = {sensor: zielSensor};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1500,
        "wires": [
            [
                "f14903b8d8cafcf6"
            ]
        ]
    },
    {
        "id": "f14903b8d8cafcf6",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "cf998755e26fe945",
        "name": "Setze Ausgansglimit 100",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 730,
        "y": 1540,
        "wires": [
            [
                "ea244f2be20330ad"
            ]
        ]
    },
    {
        "id": "4ade168f633a49b7",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "APSystem home?",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 2,
        "halt_if": "home",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "device_tracker.apsystems_2",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 2810,
        "y": 2240,
        "wires": [
            [],
            [
                "9c35e52d51caca37"
            ]
        ]
    },
    {
        "id": "9c35e52d51caca37",
        "type": "delay",
        "z": "479e3443afedb613",
        "g": "b6cbd1ee551c690b",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3070,
        "y": 2180,
        "wires": [
            [
                "2986171de753aadb"
            ]
        ]
    },
    {
        "id": "197d6f4154e77e99",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "d926ab42ae07f620",
        "name": "Einspeisebegrenzung = 400",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.regler_maximale_einspeisung"
        ],
        "labelId": [],
        "data": "{\"value\":400}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 2220,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ea244f2be20330ad",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "cf998755e26fe945",
        "name": "surfers Regelsystem OFF",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.regler_aktiv"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_boolean",
        "service": "turn_off",
        "x": 730,
        "y": 1580,
        "wires": [
            [
                "9d7ca67058014a92"
            ]
        ]
    },
    {
        "id": "f95d4fe5b1ba92c3",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "HIER: kP Regler Verstärkung anpassen",
        "info": "",
        "x": 510,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1e049cf62d58e43c",
        "type": "switch",
        "z": "479e3443afedb613",
        "g": "46a88bad508d3778",
        "name": "Bypass Ignore?",
        "property": "IgnoreBypass",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "Off",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 1920,
        "wires": [
            [
                "db71458988a0ae4a"
            ],
            [
                "2c22eb5a28b88af3"
            ]
        ]
    },
    {
        "id": "e01d8fa50d01f508",
        "type": "ha-get-entities",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Hole Daten SFMax",
        "server": "285afb99.5208c4",
        "version": 1,
        "rules": [
            {
                "condition": "state_object",
                "property": "entity_id",
                "logic": "is",
                "value": "wrSensor_typ3",
                "valueType": "flow"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 650,
        "y": 1040,
        "wires": [
            [
                "2945df02bcac2061"
            ]
        ]
    },
    {
        "id": "2945df02bcac2061",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "0ded3f6e0d781a4e",
        "name": "Set SFMax",
        "func": "let sfmax = Number(msg.payload[0].state);\nflow.set(\"SFMax\", sfmax);\nreturn;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "f64a874c50bdf191",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "fdb0ce097a97065d",
        "name": "connected",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.solarherwegh_connection_status",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "connected",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 730,
        "y": 420,
        "wires": [
            [
                "180ce22f05ebcd8b"
            ]
        ]
    },
    {
        "id": "b2900737df35050a",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "Regler Typ",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_select.regler_typ"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "ReglerTyp",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 960,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "31aef1593af4b0d7",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "SFMax",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "number.solarherwegh_output_limit"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "SFMax",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 950,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "5e173fb39bf8170d",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4cd6e76302eb583f",
        "name": "ConnectionStatus",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "sensor.solarherwegh_connection_status"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "Connected",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 990,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "8546724667636606",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "Hub ist Online WLAN",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "device_tracker.solarhub"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "home",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            }
        ],
        "x": 1580,
        "y": 320,
        "wires": [
            [
                "1bdd52ee74cd6023"
            ],
            [
                "7a5d3ef92442a929"
            ]
        ]
    },
    {
        "id": "1bdd52ee74cd6023",
        "type": "api-current-state",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "aktiv",
        "server": "285afb99.5208c4",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.regler_aktiv",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "aktiv",
                "valueType": "str"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1950,
        "y": 320,
        "wires": [
            [
                "8556d367c4b1fac5"
            ],
            [
                "7a5d3ef92442a929"
            ]
        ]
    },
    {
        "id": "f6d4dc83056b836e",
        "type": "comment",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "HIER: WR DeviceTracker prüfen",
        "info": "",
        "x": 1610,
        "y": 280,
        "wires": []
    },
    {
        "id": "959c8c911e7fde10",
        "type": "server-state-changed",
        "z": "479e3443afedb613",
        "g": "72932590259c2eb2",
        "name": "Sonnaufgang +30",
        "server": "285afb99.5208c4",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "sensor.sun_next_rising"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "30",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1570,
        "y": 1040,
        "wires": [
            [
                "10a5947e7b0e4bba"
            ]
        ]
    },
    {
        "id": "10a5947e7b0e4bba",
        "type": "change",
        "z": "479e3443afedb613",
        "g": "72932590259c2eb2",
        "name": "Monat",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$moment().month() + 1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1810,
        "y": 1040,
        "wires": [
            [
                "fd9ffa19de35ef1b"
            ]
        ]
    },
    {
        "id": "ee79553e2bee0ac5",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "72932590259c2eb2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1600,
        "y": 980,
        "wires": [
            [
                "10a5947e7b0e4bba"
            ]
        ]
    },
    {
        "id": "fd9ffa19de35ef1b",
        "type": "function",
        "z": "479e3443afedb613",
        "g": "72932590259c2eb2",
        "name": "Set Entladegrenze",
        "func": "let monat = msg.payload;\nlet akku_min = 15;\nlet volmin = flow.get (\"zHAVolMinSensor\");\n//node.warn (monat);\nswitch (monat)\n    {\n    case 1:\n        {\n        akku_min = 40;\n        break;\n        }\n    case 2:\n        {\n        akku_min = 30;\n        break;\n        }\n    case 3:\n        {\n        akku_min = 20;\n        break;\n        }\n    case 4:\n        {\n        akku_min = 20;\n        break;\n        }\n    case 5:\n        {\n        akku_min = 15;\n        break;\n        }\n    case 6:\n        {\n        akku_min = 14;\n        break;\n        }\n    case 7:\n        {\n        akku_min = 14;\n        break;\n        }\n    case 8:\n        {\n        akku_min = 15;\n        break;\n        }\n    case 9:\n        {\n        akku_min = 15;\n        break;\n        }\n    case 10:\n        {\n        akku_min = 20;\n        break;\n        }\n    case 11:\n        {\n        akku_min = 40;\n        break;\n        }\n    case 12:\n        {\n        akku_min = 50;\n        break;\n        }\n    }\nflow.set(\"Akku_min\", akku_min);\nmsg.payload = {\n    einspeisewert: akku_min,\n    sensor: volmin\n};\n//msg.payload = akku_min;\n//node.warn ( msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1040,
        "wires": [
            [
                "40cd311eb34f8bec"
            ]
        ]
    },
    {
        "id": "c4baeda9f9677e08",
        "type": "inject",
        "z": "479e3443afedb613",
        "g": "4e7901031e717127",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1820,
        "y": 280,
        "wires": [
            [
                "1bdd52ee74cd6023"
            ]
        ]
    },
    {
        "id": "40cd311eb34f8bec",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "72932590259c2eb2",
        "name": "Setze Ausgang",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{ payload.sensor }}"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{ payload.einspeisewert }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "blockInputOverrides": false,
        "domain": "number",
        "service": "set_value",
        "target": {
            "entity_id": "number.dtu_leistungsbegrenzung"
        },
        "x": 2260,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "9d7ca67058014a92",
        "type": "api-call-service",
        "z": "479e3443afedb613",
        "g": "cf998755e26fe945",
        "name": "Setze Zendure Off",
        "server": "285afb99.5208c4",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.zendure_manager_operation"
        ],
        "labelId": [],
        "data": "{\"option\":\"off\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "select",
        "service": "select_option",
        "x": 710,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "285afb99.5208c4",
        "type": "server",
        "name": "Home Assistant",
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    }
]
